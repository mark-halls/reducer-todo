{"version":3,"sources":["components/Header/index.jsx","components/TodoItem/index.jsx","reducers/index.js","contexts/index.js","components/TodoList/index.jsx","components/TodoForm/index.jsx","components/RemoveCompleted/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","TodoItem","props","className","completed","onClick","dispatch","item","reducer","state","action","type","payload","length","id","Date","now","map","filter","initialState","TodoContext","createContext","TodoProvider","useReducer","Provider","value","children","TodoList","useContext","list","key","TodoForm","useState","setItem","onSubmit","event","preventDefault","name","placeholder","onChange","target","RemoveCompleted","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAMeA,G,MAJA,WACX,OAAO,8C,cCUIC,EAXE,SAAAC,GACf,OACE,yBACEC,UAAS,eAAUD,EAAME,UAAY,WAAa,IAClDC,QAASH,EAAMI,UAEdJ,EAAMK,O,qOCFb,IAoCeC,EApCC,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,MACH,OAAID,EAAOE,QAAQC,OAAS,EACpB,GAAN,mBACKJ,GADL,CAEE,CACEF,KAAMG,EAAOE,QACbR,WAAW,EACXU,GAAIC,KAAKC,SAINP,EAGX,IAAK,mBACH,OAAOA,EAAMQ,KAAI,SAAAV,GACf,OAAIA,EAAKO,KAAOJ,EAAOE,QAAQE,GACtBP,E,yVAGF,CAAP,GACKA,EADL,CAEEH,WAAYM,EAAOE,QAAQR,eAIjC,IAAK,mBACH,OAAOK,EAAMS,QAAO,SAAAX,GAAI,OAAKA,EAAKH,aAEpC,QACE,OAAOK,IClCPU,EAAe,CACnB,CACEZ,KAAM,uBACNH,WAAW,EACXU,GAAI,aAIKM,EAAcC,0BAEdC,EAAe,SAAApB,GAAU,IAAD,EACTqB,qBAAWf,EAASW,GADX,mBAC5BV,EAD4B,KACrBH,EADqB,KAGnC,OACE,kBAACc,EAAYI,SAAb,CAAsBC,MAAO,CAAChB,EAAOH,IAClCJ,EAAMwB,W,yjBCdb,IAkBeC,EAlBE,WAAO,IAAD,EACIC,qBAAWR,GADf,mBACdS,EADc,KACRvB,EADQ,KAGrB,OACE,yBAAKH,UAAU,YACZ0B,EAAKZ,KAAI,SAAAV,GAAI,OACZ,kBAAC,EAAD,eACED,SAAU,WACRA,EAAS,CAAEK,KAAM,mBAAoBC,QAAQ,KAAML,MAErDuB,IAAKvB,EAAKO,IACNP,SCgBCwB,EA5BE,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdzB,EADc,KACR0B,EADQ,OAEAL,qBAAWR,GAAvBd,EAFY,oBAcrB,OACE,0BAAM4B,SAPa,SAAAC,GACnBA,EAAMC,iBACN9B,EAAS,CAAEK,KAAM,MAAOC,QAASL,IACjC0B,EAAQ,MAKN,2BACEtB,KAAK,OACL0B,KAAK,OACLC,YAAY,UACZb,MAAOlB,EACPgC,SAjBmB,SAAAJ,GACvBF,EAAQE,EAAMK,OAAOf,UAkBnB,4BAAQd,KAAK,UAAb,SCVS8B,EAbS,WAAO,IAAD,EACPb,qBAAWR,GAAvBd,EADmB,oBAG5B,OACE,4BACEH,UAAU,kBACVE,QAAS,kBAAMC,EAAS,CAAEK,KAAM,uBAFlC,qB,MCgBW+B,MAbf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNYwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.210e6a25.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return <h1>My Todo List</h1>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst TodoItem = props => {\r\n  return (\r\n    <div\r\n      className={`item ${props.completed ? \"complete\" : \"\"}`}\r\n      onClick={props.dispatch}\r\n    >\r\n      {props.item}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","// {\r\n//   item: \"Learn about reducers\",\r\n//   completed: false,\r\n//   id: 3892987589\r\n// }\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      if (action.payload.length > 0) {\r\n        return [\r\n          ...state,\r\n          {\r\n            item: action.payload,\r\n            completed: false,\r\n            id: Date.now()\r\n          }\r\n        ];\r\n      } else {\r\n        return state;\r\n      }\r\n\r\n    case \"TOGGLE_COMPLETED\":\r\n      return state.map(item => {\r\n        if (item.id !== action.payload.id) {\r\n          return item;\r\n        }\r\n\r\n        return {\r\n          ...item,\r\n          completed: !action.payload.completed\r\n        };\r\n      });\r\n\r\n    case \"REMOVE_COMPLETED\":\r\n      return state.filter(item => !item.completed);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\nimport reducer from \"../reducers\";\r\n\r\nconst initialState = [\r\n  {\r\n    item: \"Learn about reducers\",\r\n    completed: false,\r\n    id: 3892987589\r\n  }\r\n];\r\n\r\nexport const TodoContext = createContext();\r\n\r\nexport const TodoProvider = props => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <TodoContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nimport TodoItem from \"../TodoItem\";\r\nimport { TodoContext } from \"../../contexts\";\r\n\r\nconst TodoList = () => {\r\n  const [list, dispatch] = useContext(TodoContext);\r\n\r\n  return (\r\n    <div className=\"todolist\">\r\n      {list.map(item => (\r\n        <TodoItem\r\n          dispatch={() => {\r\n            dispatch({ type: \"TOGGLE_COMPLETED\", payload: { ...item } });\r\n          }}\r\n          key={item.id}\r\n          {...item}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport { TodoContext } from \"../../contexts\";\r\n\r\nconst TodoForm = () => {\r\n  const [item, setItem] = useState(\"\");\r\n  const [, dispatch] = useContext(TodoContext);\r\n\r\n  const handleTextChange = event => {\r\n    setItem(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch({ type: \"ADD\", payload: item });\r\n    setItem(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"item\"\r\n        placeholder=\"Todo...\"\r\n        value={item}\r\n        onChange={handleTextChange}\r\n      />\r\n      <button type=\"submit\">Add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { TodoContext } from \"../../contexts\";\r\n\r\nconst RemoveCompleted = () => {\r\n  const [, dispatch] = useContext(TodoContext);\r\n\r\n  return (\r\n    <button\r\n      className=\"clear-completed\"\r\n      onClick={() => dispatch({ type: \"REMOVE_COMPLETED\" })}\r\n    >\r\n      Remove Completed\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default RemoveCompleted;\r\n","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\nimport RemoveCompleted from \"./components/RemoveCompleted\";\n\nimport { TodoProvider } from \"./contexts\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodoProvider>\n        <TodoList />\n        <TodoForm />\n        <RemoveCompleted />\n      </TodoProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}